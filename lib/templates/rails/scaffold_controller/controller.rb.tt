<% if namespaced? -%>
  require_dependency "<%= namespaced_path %>/application_controller"
<% end -%>
<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  <%# include ActAsConfig # sets controller to show all actions using the "configuration" template%>
  before_action :set_<%= singular_table_name %>, only: [:show, :edit, :update, :destroy]
  before_action :authorize_access

  def index
    @<%= plural_table_name %> = policy_scope(<%= class_name %>).decorate
  end

  def show; end

  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>.decorate
  end

  def edit; end

  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>.decorate
    return on_save_success if @<%= orm_instance.save %>

    render :new
  end

  def update
    return on_save_success if @<%= orm_instance.update("#{singular_table_name}_params") %>

    render :edit
  end

  def destroy
    return on_destroy_success if @<%= orm_instance.destroy %>

    redirect_to(<%= index_helper %>_url, alert: <%= "'#{human_name} could not be destroyed.'" %>)
  end

  private

  def on_save_success
    redirect_to <%= index_helper %>_url, notice: <%= "'#{human_name} was successfully saved.'" %>
  end

  def on_destroy_success
    redirect_to <%= index_helper %>_url, notice: <%= "'#{human_name} was successfully destroyed.'" %>
  end

  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = <%= orm_class.find(class_name, "params[:id]") %>.decorate
  end

  def authorize_access
    return authorize @<%= singular_table_name %> if @<%= singular_table_name %>

    authorize EvaluationCriterium
  end

  def <%= "#{singular_table_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.fetch(:<%= singular_table_name %>, {})
    <%- else -%>
    params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
    <%- end -%>
  end
end
<% end -%>
